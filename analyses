-- SQL Retail Sales Analysis - P1

-- Create Database
CREATE DATABASE sql_project_p2;

-- Note: Connect to 'sql_project_p2' before running the rest of the script.

-- Create Table
DROP TABLE IF EXISTS retail_sales;
CREATE TABLE retail_sales (
    transaction_id INT PRIMARY KEY,
    sale_date DATE,
    sale_time TIME,
    customer_id INT,
    gender VARCHAR(15),
    age INT,
    category VARCHAR(15),
    quantity INT,
    price_per_unit FLOAT,
    cogs FLOAT,
    total_sale FLOAT
);

-- View Sample Data
SELECT * FROM retail_sales LIMIT 10;

-- Basic Count
SELECT COUNT(*) AS total_records FROM retail_sales;

-- Data Cleaning Checks
SELECT * FROM retail_sales WHERE transaction_id IS NULL;
SELECT * FROM retail_sales WHERE sale_date IS NULL;
SELECT * FROM retail_sales WHERE sale_time IS NULL;

-- Check for Any Nulls in Key Fields
SELECT * FROM retail_sales
WHERE transaction_id IS NULL
   OR sale_date IS NULL
   OR sale_time IS NULL
   OR gender IS NULL
   OR category IS NULL
   OR quantity IS NULL
   OR cogs IS NULL
   OR total_sale IS NULL;

-- Remove Rows with Nulls in Essential Fields
DELETE FROM retail_sales
WHERE transaction_id IS NULL
   OR sale_date IS NULL
   OR sale_time IS NULL
   OR gender IS NULL
   OR category IS NULL
   OR quantity IS NULL
   OR cogs IS NULL
   OR total_sale IS NULL;

-- Data Exploration
SELECT COUNT(*) AS total_sales FROM retail_sales;

SELECT COUNT(DISTINCT customer_id) AS unique_customers FROM retail_sales;

SELECT DISTINCT category FROM retail_sales;

-- Business Questions & Analysis

-- Q1: Sales on 2022-11-05
SELECT * FROM retail_sales 
WHERE sale_date = '2022-11-05';

-- Q2: Clothing category, quantity >= 4 in Nov 2022
SELECT * FROM retail_sales
WHERE category = 'Clothing'
  AND TO_CHAR(sale_date, 'YYYY-MM') = '2022-11'
  AND quantity >= 4;

-- Q3: Total sales for each category
SELECT category, 
       SUM(total_sale) AS net_sale, 
       COUNT(*) AS total_orders
FROM retail_sales
GROUP BY category;

-- Q4: Average age of customers in 'Beauty' category
SELECT ROUND(AVG(age), 2) AS avg_age
FROM retail_sales
WHERE category = 'Beauty';

-- Q5: Transactions where total_sale > 1000
SELECT * FROM retail_sales 
WHERE total_sale > 1000;

-- Q6: Transaction count by gender and category
SELECT category, 
       gender, 
       COUNT(*) AS total_transactions
FROM retail_sales
GROUP BY category, gender
ORDER BY category;

-- Q7: Average sale per month - Best month each year
SELECT year, 
       month, 
       avg_sale
FROM (
    SELECT 
        EXTRACT(YEAR FROM sale_date) AS year,
        EXTRACT(MONTH FROM sale_date) AS month,
        AVG(total_sale) AS avg_sale,
        RANK() OVER (PARTITION BY EXTRACT(YEAR FROM sale_date) ORDER BY AVG(total_sale) DESC) AS rank
    FROM retail_sales
    GROUP BY EXTRACT(YEAR FROM sale_date), EXTRACT(MONTH FROM sale_date)
) ranked_sales
WHERE rank = 1;

-- Q8: Top 5 customers by total sales
SELECT customer_id, 
       SUM(total_sale) AS total_sales
FROM retail_sales
GROUP BY customer_id
ORDER BY total_sales DESC
LIMIT 5;

-- Q9: Unique customers per category
SELECT category, 
       COUNT(DISTINCT customer_id) AS unique_customers
FROM retail_sales
GROUP BY category;

-- Q10: Shift-wise order distribution
WITH hourly_sale AS (
    SELECT *, 
        CASE
            WHEN EXTRACT(HOUR FROM sale_time) < 12 THEN 'Morning'
            WHEN EXTRACT(HOUR FROM sale_time) BETWEEN 12 AND 17 THEN 'Afternoon'
            ELSE 'Evening'
        END AS shift
    FROM retail_sales
)
SELECT shift, 
       COUNT(*) AS total_orders
FROM hourly_sale
GROUP BY shift;

-- End of Project
